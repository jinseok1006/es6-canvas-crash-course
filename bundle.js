(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>r});var i=e(537),s=e.n(i),a=e(645),o=e.n(a)()(s());o.push([t.id,"* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\nbody {\n    overflow: hidden;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.flex {\n    display: flex;\n}\n\nol {\n    list-style: none;\n}\n\n#nav li {\n    padding-right: 0.7rem;\n}\n\n.p-1 {\n    padding: 0.5rem;\n}\n\n.bg-gray {\n    background-color: darkgray;\n}\n\n#nav span {\n    cursor: pointer;\n}\n\ncanvas {\n    display: block;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,SAAS;IACT,sBAAsB;AAC1B;AACA;IACI,gBAAgB;IAChB,yCAAyC;AAC7C;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,0BAA0B;AAC9B;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,cAAc;AAClB",sourcesContent:["* {\n    padding: 0;\n    margin: 0;\n    box-sizing: border-box;\n}\nbody {\n    overflow: hidden;\n    font-family: Arial, Helvetica, sans-serif;\n}\n\n.flex {\n    display: flex;\n}\n\nol {\n    list-style: none;\n}\n\n#nav li {\n    padding-right: 0.7rem;\n}\n\n.p-1 {\n    padding: 0.5rem;\n}\n\n.bg-gray {\n    background-color: darkgray;\n}\n\n#nav span {\n    cursor: pointer;\n}\n\ncanvas {\n    display: block;\n}\n"],sourceRoot:""}]);const r=o},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",i=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),i&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),i&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,i,s,a){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var r=0;r<this.length;r++){var c=this[r][0];null!=c&&(o[c]=!0)}for(var h=0;h<t.length;h++){var l=[].concat(t[h]);i&&o[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),s&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=s):l[4]="".concat(s)),n.push(l))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),a="/*# ".concat(s," */"),o=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(o).concat([a]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,i=0;i<n.length;i++)if(n[i].identifier===t){e=i;break}return e}function i(t,i){for(var a={},o=[],r=0;r<t.length;r++){var c=t[r],h=i.base?c[0]+i.base:c[0],l=a[h]||0,d="".concat(h," ").concat(l);a[h]=l+1;var u=e(d),y={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)n[u].references++,n[u].updater(y);else{var f=s(y,i);i.byIndex=r,n.splice(r,0,{identifier:d,updater:f,references:1})}o.push(d)}return o}function s(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,s){var a=i(t=t||[],s=s||{});return function(t){t=t||[];for(var o=0;o<a.length;o++){var r=e(a[o]);n[r].references--}for(var c=i(t,s),h=0;h<a.length;h++){var l=e(a[h]);0===n[l].references&&(n[l].updater(),n.splice(l,1))}a=c}}},569:t=>{var n={};t.exports=function(t,e){var i=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var i="";e.supports&&(i+="@supports (".concat(e.supports,") {")),e.media&&(i+="@media ".concat(e.media," {"));var s=void 0!==e.layer;s&&(i+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),i+=e.css,s&&(i+="}"),e.media&&(i+="}"),e.supports&&(i+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(i,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(i){var s=n[i];if(void 0!==s)return s.exports;var a=n[i]={id:i,exports:{}};return t[i](a,a.exports,e),a.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.nc=void 0,(()=>{var t=e(379),n=e.n(t),i=e(795),s=e.n(i),a=e(569),o=e.n(a),r=e(565),c=e.n(r),h=e(216),l=e.n(h),d=e(589),u=e.n(d),y=e(426),f={};f.styleTagTransform=u(),f.setAttributes=c(),f.insert=o().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=l(),n()(y.Z,f),y.Z&&y.Z.locals&&y.Z.locals;class v{constructor(t){this.canvas=t,this.car=new A(100,100,50,100),this.raf=null,this.animate(this.canvas.ctx)}animate(){this.car.update(),this.canvas.clear(),this.car.draw(this.canvas.ctx),this.raf=requestAnimationFrame(this.animate.bind(this))}}class A{constructor(t,n,e,i){this.x=t,this.y=n,this.width=e,this.height=i,this.angle=0,this.velocity=0,this.maxVelocity=3,this.friction=.03,this.controls=new p}update(){if(Math.abs(this.velocity)>0){const t=this.velocity>=0?1:-1;this.controls.right&&(this.angle+=.03*t),this.controls.left&&(this.angle-=.03*t)}this.controls.forward&&(this.velocity+=.1),this.controls.backward&&(this.velocity-=.1),this.velocity>this.maxVelocity?this.velocity=this.maxVelocity:this.velocity<-this.maxVelocity/2&&(this.velocity=-this.maxVelocity/2),Math.abs(this.velocity)<this.friction&&(this.velocity=0),this.velocity>0?this.velocity-=this.friction:this.velocity<0&&(this.velocity+=this.friction),this.y-=Math.cos(this.angle)*this.velocity,this.x+=Math.sin(this.angle)*this.velocity}draw(t){t.translate(this.x+this.width/2,this.y+this.height/2),t.rotate(this.angle),t.fillRect(-this.width/2,-this.height/2,this.width,this.height),t.setTransform(1,0,0,1,0,0)}}class p{constructor(){this.left=!1,this.right=!1,this.backward=!1,this.forward=!1,this.#t()}#t(){window.onkeydown=t=>{switch(t.key){case"ArrowLeft":this.left=!0;break;case"ArrowRight":this.right=!0;break;case"ArrowUp":this.forward=!0;break;case"ArrowDown":this.backward=!0}},window.onkeyup=t=>{switch(t.key){case"ArrowLeft":this.left=!1;break;case"ArrowRight":this.right=!1;break;case"ArrowUp":this.forward=!1;break;case"ArrowDown":this.backward=!1}}}}const x=(t,n,e)=>t+(n-t)*e;class w{constructor(t){this.canvas=t,this.raf=null,this.radius=50,this.angle=0,this.mouse={x:0,y:0},this.A={x:0,y:0},this.B={x:0,y:0},this.C={x:100,y:100},this.D={x:200,y:200},this.I={x:0,y:0},setTimeout((()=>{this.init()}),100),this.animate(this.canvas.ctx)}init(){window.onmousemove=t=>{this.mouse.x=t.x,this.mouse.y=t.y-this.canvas.navHeight},window.onclick=t=>{this.C.x=t.x,this.C.y=t.y-this.canvas.navHeight},window.oncontextmenu=t=>{t.preventDefault(),this.D.x=t.x,this.D.y=t.y-this.canvas.navHeight}}animate(t){this.canvas.clear(),this.update(),this.draw(t),this.raf=requestAnimationFrame(this.animate.bind(this,t))}update(){this.A.x=this.mouse.x+Math.cos(this.angle)*this.radius,this.A.y=this.mouse.y+Math.sin(this.angle)*this.radius,this.B.x=this.mouse.x-Math.cos(this.angle)*this.radius,this.B.y=this.mouse.y-Math.sin(this.angle)*this.radius,this.I=((t,n,e,i)=>{const s=(i.x-e.x)*(t.y-e.y)-(i.y-e.y)*(t.x-e.x),a=(e.x-t.y)*(t.x-n.x)-(e.x-t.x)*(t.y-n.y),o=(i.y-e.y)*(n.x-t.x)-(i.x-e.x)*(n.y-t.y);if(0!=o){const e=s/o,i=a/o;if(e>=0&&e<=1&&i>=0&&i<=1)return{x:x(t.x,n.x,e),y:x(t.y,n.y,e),offset:e}}return null})(this.A,this.B,this.C,this.D),this.angle+=.02}draw(t){t.beginPath(),t.moveTo(this.A.x,this.A.y),t.lineTo(this.B.x,this.B.y),t.moveTo(this.C.x,this.C.y),t.lineTo(this.D.x,this.D.y),t.stroke(),this.drawDot(t,this.A,"A"),this.drawDot(t,this.B,"B"),this.drawDot(t,this.C,"C"),this.drawDot(t,this.D,"D"),this.I&&this.drawDot(t,this.I,"I")}drawDot(t,n,e){t.beginPath(),t.fillStyle="white",t.arc(n.x,n.y,10,0,2*Math.PI),t.fill(),t.stroke(),t.fillStyle="black",t.textAlign="center",t.textBaseline="middle",t.font="bold 14px serif",t.fillText(e,n.x,n.y)}}class m{constructor(){this.canvas=new g(this.destroyHead.bind(this)),this.nowHead=null,this.addNavClickListener()}addNavClickListener(){const t=document.querySelectorAll("#nav span"),n=[v,w];t.forEach(((t,e)=>t.addEventListener("click",(()=>{this.destroyHead(),this.nowHead=new n[e](this.canvas),console.log(this.nowHead)}))))}debug(){new w(this.canvas)}destroyHead(){this.nowHead&&(cancelAnimationFrame(this.nowHead.raf),window.onkeydown=()=>!1,window.onkeyup=()=>!1,window.onmousemove=()=>!1,window.onclick=()=>!1,window.oncontextmenu=()=>!1)}}class g{constructor(t){this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.navHeight=document.getElementById("nav").offsetHeight,this.destroyHead=t,this.resize(),window.addEventListener("resize",this.resize.bind(this))}clear(){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height)}resize(){this.canvas.height=window.innerHeight-this.navHeight,this.canvas.width=window.innerWidth,this.clear(),this.destroyHead(),this.ctx.save(),this.ctx.textBaseline="top",this.ctx.font="48px serif",this.ctx.fillText("Click Nav Contents...",5,10),this.ctx.restore()}}window.onload=()=>{new m}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,